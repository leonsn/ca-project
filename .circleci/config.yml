version: 2.0
jobs:
  test:
    working_directory: ~/app
    docker:
      - image: python:2.7-slim
    steps:
      - checkout # check out source code to working directory
      - run: mkdir test-results
      - run:
          command: |
            pip install -r requirements.txt
            pip install unittest-xml-reporting
      - run:
          command: |
            python -m xmlrunner tests -o test-results
      - store_test_results: # Upload test results for display in Test Summary
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts
          path: test-results
          destination: tr1
  run-local:
    working_directory: ~/app
    docker:
      - image: python:2.7-slim
    steps:
      - checkout # check out source code to working directory
      - run:
          command: |
            pip install -r requirements.txt
      - run:
          command: |
            python run.py
  dockerize:
    machine: true
    steps:
      - checkout
      # Login to docker
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      # build the application image
      - run: docker build -t leonsn/circleci-project-app:latest . #$CIRCLE_SHA1 .
      # deploy the image
      - run: docker push leonsn/circleci-project-app:latest #$CIRCLE_SHA1
  deploy:
    machine: true
    steps:
      - run:
          name: Deploy over SSH
          command: |
                  #ssh $SSH_USER@$SSH_HOST docker pull leonsn/circleci-project-app
                  #ssh $SSH_USER@$SSH_HOST "if [ $(docker inspect -f '{{.State.Running}}' circleci-server) = 'true' ]; then docker container stop $(docker inspect -f '{{.Id}}' circleci-server); fi"
                  ssh $SSH_USER@$SSH_HOST docker stop circleci-server > /dev/null 2>&1
                  #ssh $SSH_USER@$SSH_HOST docker stop circleci-server
                  ssh $SSH_USER@$SSH_HOST docker pull leonsn/circleci-project-app
                  ssh $SSH_USER@$SSH_HOST docker container run -d --rm -p 5000:5000 --name circleci-server leonsn/circleci-project-app run.py
  health_check:
    machine: true
    steps:
      - run: mkdir test-results
      - run:
          name: Test that site is up
          command: |
            mkdir tests
            curl $SSH_HOST:5000 > test-results/site.html
      - store_artifacts:
          path: test-results
          destination: prefix


workflows:
  version: 2
  test_and_package_flow:
    jobs:
      - deploy
      - health-check:
          requires:
            - deploy
      #- test
      #- dockerize:
      #    requires:
      #      - test
      #    filters:
      #      branches:
      #        only: master
      #- deploy:
      #    requires:
      #      - dockerize
      #    filters:
      #      branches:
      #        only: master
